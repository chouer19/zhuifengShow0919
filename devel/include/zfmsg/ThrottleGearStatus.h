// Generated by gencpp from file zfmsg/ThrottleGearStatus.msg
// DO NOT EDIT!


#ifndef ZFMSG_MESSAGE_THROTTLEGEARSTATUS_H
#define ZFMSG_MESSAGE_THROTTLEGEARSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace zfmsg
{
template <class ContainerAllocator>
struct ThrottleGearStatus_
{
  typedef ThrottleGearStatus_<ContainerAllocator> Type;

  ThrottleGearStatus_()
    : header()
    , ts(0)
    , controlMode(0)
    , motorSpeed(0.0)
    , motorCurrent(0.0)
    , motorBreak(0)
    , throttle(0.0)
    , gear()
    , gearLeverPosition()
    , pedalBreak(0)
    , errorCode(0)  {
    }
  ThrottleGearStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ts(0)
    , controlMode(0)
    , motorSpeed(0.0)
    , motorCurrent(0.0)
    , motorBreak(0)
    , throttle(0.0)
    , gear(_alloc)
    , gearLeverPosition(_alloc)
    , pedalBreak(0)
    , errorCode(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int64_t _ts_type;
  _ts_type ts;

   typedef uint8_t _controlMode_type;
  _controlMode_type controlMode;

   typedef float _motorSpeed_type;
  _motorSpeed_type motorSpeed;

   typedef float _motorCurrent_type;
  _motorCurrent_type motorCurrent;

   typedef uint8_t _motorBreak_type;
  _motorBreak_type motorBreak;

   typedef float _throttle_type;
  _throttle_type throttle;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gear_type;
  _gear_type gear;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gearLeverPosition_type;
  _gearLeverPosition_type gearLeverPosition;

   typedef uint8_t _pedalBreak_type;
  _pedalBreak_type pedalBreak;

   typedef uint8_t _errorCode_type;
  _errorCode_type errorCode;





  typedef boost::shared_ptr< ::zfmsg::ThrottleGearStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zfmsg::ThrottleGearStatus_<ContainerAllocator> const> ConstPtr;

}; // struct ThrottleGearStatus_

typedef ::zfmsg::ThrottleGearStatus_<std::allocator<void> > ThrottleGearStatus;

typedef boost::shared_ptr< ::zfmsg::ThrottleGearStatus > ThrottleGearStatusPtr;
typedef boost::shared_ptr< ::zfmsg::ThrottleGearStatus const> ThrottleGearStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zfmsg::ThrottleGearStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zfmsg::ThrottleGearStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace zfmsg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'zfmsg': ['/home/zf/xuechong_ws/zhuifengShow0919/src/zfmsg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::zfmsg::ThrottleGearStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zfmsg::ThrottleGearStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zfmsg::ThrottleGearStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zfmsg::ThrottleGearStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zfmsg::ThrottleGearStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zfmsg::ThrottleGearStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zfmsg::ThrottleGearStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ea7e7f7f909809e23589ebec1a82490c";
  }

  static const char* value(const ::zfmsg::ThrottleGearStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xea7e7f7f909809e2ULL;
  static const uint64_t static_value2 = 0x3589ebec1a82490cULL;
};

template<class ContainerAllocator>
struct DataType< ::zfmsg::ThrottleGearStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zfmsg/ThrottleGearStatus";
  }

  static const char* value(const ::zfmsg::ThrottleGearStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zfmsg::ThrottleGearStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header      header\n\
int64       ts\n\
uint8       controlMode\n\
float32     motorSpeed\n\
float32     motorCurrent\n\
uint8       motorBreak\n\
float32     throttle\n\
string      gear\n\
string      gearLeverPosition\n\
uint8       pedalBreak\n\
uint8       errorCode\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::zfmsg::ThrottleGearStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zfmsg::ThrottleGearStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ts);
      stream.next(m.controlMode);
      stream.next(m.motorSpeed);
      stream.next(m.motorCurrent);
      stream.next(m.motorBreak);
      stream.next(m.throttle);
      stream.next(m.gear);
      stream.next(m.gearLeverPosition);
      stream.next(m.pedalBreak);
      stream.next(m.errorCode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ThrottleGearStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zfmsg::ThrottleGearStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zfmsg::ThrottleGearStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ts: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ts);
    s << indent << "controlMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.controlMode);
    s << indent << "motorSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.motorSpeed);
    s << indent << "motorCurrent: ";
    Printer<float>::stream(s, indent + "  ", v.motorCurrent);
    s << indent << "motorBreak: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motorBreak);
    s << indent << "throttle: ";
    Printer<float>::stream(s, indent + "  ", v.throttle);
    s << indent << "gear: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gear);
    s << indent << "gearLeverPosition: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gearLeverPosition);
    s << indent << "pedalBreak: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pedalBreak);
    s << indent << "errorCode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.errorCode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZFMSG_MESSAGE_THROTTLEGEARSTATUS_H
